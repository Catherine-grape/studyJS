/* 
HTTP中每一种请求的类型的特点
- GET系列
    - GET
    - DELETE 一般用于告诉服务器，删除某些东西
    - HEAD 只想获取响应头的内容，告诉服务器响应主体不要了
    - OPTIONS 试探性请求，发送某个请求给服务器，看看服务器能不能接收到，如果接收到能不能正常返回
- POST系列
    - POST
    - PUT和DELETE对应，一般用于告诉服务器，想在服务器上存储某些东西（一般应用于文件和大型数据）


这么多请求方式就是为了语义化，但是我不遵循语义化也没有太大关系（在语法上没事，到时候就是看看后台人员怎么定义）

GET系列一般用于从服务器获取信息，POST系列一般用于给服务器发送信息，但是无论是GET还是POST都可以把信息传递给服务器，也可以从服务器获取信息，只不过是多少而已
GET一般都是发送的少，得到的多
POST一般都是发送的多，得到的少

?id=1



客户是怎么样把信息传递给服务器的
- 问号传参 xhr.open（'xxx/getDate?name=1&age=2') 适用于get系列请求
- 设置请求头的方式 xhr.requestHeader('key',value) 不区分请求方式
- 设置请求主体 xhr.send(请求主体)适用于post系列请求

那服务器怎么把信息返回给客户端
- 通过响应头 （特殊含义的东西 浏览器自动给你加上的）
- 通过响应体（大部分都是基于响应体拿的）



post系列和get系列之间的其他区别
1、GET传递给服务器的内容给POST的少，因为浏览器对URL的大小有限制（IE一般限制2kb左右，谷歌一般限制7kb左右）get一般通过url 传递 长度过长 浏览器自动把超过的截取掉
POST系列的请求理论上可以发送无限大的数据
xhr.open('get','/list?name=1&age=2&sex=0&...')
xhr.send(....)


2. GET系列请求相对于POST来说不安全
GET系列请求时基于url的问号进行传参，参数会直接暴露在url上，别人可以很容的使用url劫持把你的参数进行篡改或者获取
POST系列的请求时把参数存储到请求主题中，别人不容易获取和篡改

3. GET系列请求会默认走缓存，为了节省性能提高请求的速度（是否走缓存是可以控制的）如果第一次请求的URL和第二次请求的URL一模一样，浏览器任务你想请求和第一次一样的内容，它就会默认给你走缓存。如果两次请求的URL不一样，那浏览器就会认为你想请求新的内容，就不会走缓存了。  只会与上一次对比

4. POST系列的请求是不走缓存  没有缓存机制
*/
let time = new Date().getTime();
let flag = Math.random();
let url = 'https://www.baidu.com/index.html?_=' + time; //每次都不走缓存




/* 
Content-Type: application/x-www-form-urlencoded
es=credit&ek=fepv&et=20210330175321&ev[chn]=&ev[tid]=&ev[sid]=&ev[ext]=&ev[url]=https%3A%2F%2Fcredit.baidu.com%2F&ev[bid]=34330C02FC98C0AAB9ACD7DFBBE19FA8%3AFG
*/






/* 
// HTTP每一种请求的类型的特点
    // - GET系列
    //   + GET
    //   + DELETE 一般用于告诉服务器，删除某些东西
    //   + HEAD 只想获取响应头的内容，告诉服务器响应主体不要了
    //   + OPTIONS 试探性请求，发送某个请求给服务器，看看服务器能不能接受到，如果接收到能不能正常返回
    // - POST系列
    //   + POST
    //   + PUT 和DELETE对应，一般用于告诉服务器，想在服务器上存储某些东西(一般应用于文件和大型数据)

    //  这么多请求方式就是为了语义化，但是我不遵循语义化也没有太大关系(在语法上没事，到时候就是看看有台人员怎么定义的)

    // GET系列一般用于从服务器获取信息，POST系列一般用于给服务器发送信息，但是无论是GET还是POST都可以把信息传递给服务器，也可以从服务器获取信息，只不过是多少而已
    // GET一般都是发送的少，得到的多
    // POST一般都是发送的多，得到的少

    // 客户是怎样把信息传递给服务器的
    // - 问号传参 xhr.open('xxx/getDate?id=1') 适用于get系列请求
    // - 设置请求头的方式 xhr.requestHeader('key',value) 不区分请求方式
    // - 设置请求主体 xhr.send(请求主体) 适用于post系列请求

    // 那服务器怎样把信息返回给客户端
    // - 通过响应头
    // - 通过响应体(大部分都是基于响应体拿)
*/