{"remainingRequest":"/Users/fivegl/Desktop/demo/node_modules/babel-loader/lib/index.js!/Users/fivegl/Desktop/demo/node_modules/eslint-loader/index.js??ref--13-0!/Users/fivegl/Desktop/demo/src/main.js","dependencies":[{"path":"/Users/fivegl/Desktop/demo/src/main.js","mtime":1619596802879},{"path":"/Users/fivegl/Desktop/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fivegl/Desktop/demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fivegl/Desktop/demo/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"/Users/fivegl/Desktop/demo/node_modules/core-js/modules/es6.array.iterator.js\";\nimport \"/Users/fivegl/Desktop/demo/node_modules/core-js/modules/es6.promise.js\";\nimport \"/Users/fivegl/Desktop/demo/node_modules/core-js/modules/es6.object.assign.js\";\nimport \"/Users/fivegl/Desktop/demo/node_modules/core-js/modules/es7.promise.finally.js\";\nimport Vue from 'vue';\nimport App from \"./App.vue\";\nimport store from \"./store\";\nimport router from \"./router\";\nimport { checkLogin, getPower } from \"./api/main\";\n/* 导入公共样式 */\n\nimport \"./assets/reset.min.css\";\nimport \"./assets/font/iconfont.css\";\n/* 导入UI库中所有的组件和对应的样式 */\n\nimport ElementUI from 'element-ui';\nimport \"element-ui/lib/theme-chalk/index.css\";\nVue.use(ElementUI); //初始化Element，用use放在来Vue的全局上\n\nVue.config.productionTip = false; // 当前的接口的请求是一个串行的过程，等到登录校验成功之后，再去发送请求权限的接口\n\ncheckLogin().then(function (result) {\n  var code = result.code;\n\n  if (code == 0) {\n    // 如果当前的登录校验成功，就再继续请求权限的接口\n    // 登录成功之后再渲染页面，因为验证是一个异步的，登录失败也会导致先行渲染，所以在这里面先验证成功再进行渲染页面\n    new Vue({\n      store: store,\n      router: router,\n      render: function render(h) {\n        return h(App);\n      }\n    }).$mount('#app');\n    return getPower();\n  } else {\n    //如果校验失败，就返回一个失败的promise实例，让下面的catch执行\n    // Vue.prototype.$alert('当前非法登录，请返回登录页', {\n    //   callback: () => {\n    //     location.href = '/login.html'\n    //   }\n    // })\n    return Promise.reject();\n  }\n}).then(function (result) {\n  //return getPower()//.then(() => {}) 避免嵌套使用return 在下面写\n  var code = result.code,\n      power = result.power;\n\n  if (code == 0) {\n    // 应该把power存储到store中\n    store.commit('changePower', power);\n  }\n}).catch(function () {\n  Vue.prototype.$alert('当前非法登录，请返回登录页', {\n    callback: function callback() {\n      location.href = '/login.html';\n    }\n  });\n});\n/* new Vue({\r\n  store,\r\n  router,\r\n  render: h => h(App)\r\n}).$mount('#app');\r\n */",{"version":3,"sources":["/Users/fivegl/Desktop/demo/src/main.js"],"names":["Vue","App","store","router","checkLogin","getPower","ElementUI","use","config","productionTip","then","result","code","render","h","$mount","Promise","reject","power","commit","catch","prototype","$alert","callback","location","href"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,GAAP;AACA,OAAOC,KAAP;AACA,OAAOC,MAAP;AACA,SAAQC,UAAR,EAAoBC,QAApB;AAEA;;AACA;AACA;AAEA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,sCAAP;AACAN,GAAG,CAACO,GAAJ,CAAQD,SAAR,E,CAAmB;;AACnBN,GAAG,CAACQ,MAAJ,CAAWC,aAAX,GAA2B,KAA3B,C,CAEA;;AACAL,UAAU,GAAGM,IAAb,CAAkB,UAACC,MAAD,EAAY;AAAA,MACtBC,IADsB,GACbD,MADa,CACtBC,IADsB;;AAE5B,MAAIA,IAAI,IAAI,CAAZ,EAAe;AACb;AACA;AACA,QAAIZ,GAAJ,CAAQ;AACNE,MAAAA,KAAK,EAALA,KADM;AAENC,MAAAA,MAAM,EAANA,MAFM;AAGNU,MAAAA,MAAM,EAAE,gBAAAC,CAAC;AAAA,eAAIA,CAAC,CAACb,GAAD,CAAL;AAAA;AAHH,KAAR,EAIGc,MAJH,CAIU,MAJV;AAKA,WAAOV,QAAQ,EAAf;AACD,GATD,MASO;AAAC;AACN;AACA;AACA;AACA;AACA;AACA,WAAOW,OAAO,CAACC,MAAR,EAAP;AACD;AACF,CAnBD,EAmBGP,IAnBH,CAmBQ,UAACC,MAAD,EAAY;AACnB;AADmB,MAEZC,IAFY,GAEID,MAFJ,CAEZC,IAFY;AAAA,MAENM,KAFM,GAEIP,MAFJ,CAENO,KAFM;;AAGlB,MAAIN,IAAI,IAAI,CAAZ,EAAe;AACb;AACAV,IAAAA,KAAK,CAACiB,MAAN,CAAa,aAAb,EAA2BD,KAA3B;AACD;AACF,CA1BD,EA0BGE,KA1BH,CA0BS,YAAM;AACbpB,EAAAA,GAAG,CAACqB,SAAJ,CAAcC,MAAd,CAAqB,eAArB,EAAsC;AAClCC,IAAAA,QAAQ,EAAE,oBAAM;AACdC,MAAAA,QAAQ,CAACC,IAAT,GAAgB,aAAhB;AACD;AAHiC,GAAtC;AAKD,CAhCD;AAmCA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Vue from 'vue';\r\nimport App from './App.vue';\r\nimport store from './store';\r\nimport router from './router';\r\nimport {checkLogin, getPower}from './api/main'\r\n\r\n/* 导入公共样式 */\r\nimport './assets/reset.min.css';\r\nimport './assets/font/iconfont.css';\r\n\r\n/* 导入UI库中所有的组件和对应的样式 */\r\nimport ElementUI from 'element-ui';\r\nimport \"element-ui/lib/theme-chalk/index.css\";\r\nVue.use(ElementUI);//初始化Element，用use放在来Vue的全局上\r\nVue.config.productionTip = false;\r\n\r\n// 当前的接口的请求是一个串行的过程，等到登录校验成功之后，再去发送请求权限的接口\r\ncheckLogin().then((result) => {\r\n  let { code } = result;\r\n  if (code == 0) {\r\n    // 如果当前的登录校验成功，就再继续请求权限的接口\r\n    // 登录成功之后再渲染页面，因为验证是一个异步的，登录失败也会导致先行渲染，所以在这里面先验证成功再进行渲染页面\r\n    new Vue({\r\n      store,\r\n      router,\r\n      render: h => h(App)\r\n    }).$mount('#app');\r\n    return getPower();\r\n  } else {//如果校验失败，就返回一个失败的promise实例，让下面的catch执行\r\n    // Vue.prototype.$alert('当前非法登录，请返回登录页', {\r\n    //   callback: () => {\r\n    //     location.href = '/login.html'\r\n    //   }\r\n    // })\r\n    return Promise.reject()\r\n  }\r\n}).then((result) => {\r\n //return getPower()//.then(() => {}) 避免嵌套使用return 在下面写\r\n  let { code, power } = result;\r\n  if (code == 0) {\r\n    // 应该把power存储到store中\r\n    store.commit('changePower',power)\r\n  }\r\n}).catch(() => {\r\n  Vue.prototype.$alert('当前非法登录，请返回登录页', {\r\n      callback: () => {\r\n        location.href = '/login.html'\r\n      }\r\n    })\r\n})\r\n\r\n\r\n/* new Vue({\r\n  store,\r\n  router,\r\n  render: h => h(App)\r\n}).$mount('#app');\r\n */"]}]}